"__     _____ __  __
"\ \   / /_ _|  \/  |
" \ \ / / | || |\/| |
"  \ V /  | || |  | |
"   \_/  |___|_|  |_|
"

" ===
" === Auto load for first time uses
" ===
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ====================
" === Editor Setup ===
" ====================

" ===
" === System
" ===
set nocompatible " set vi not compatible with vim
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
set mouse=a
set encoding=utf-8
set clipboard=unnamed

" Prevent incorrect background rendering
let &t_ut=''

" ===
" === Main code display
" ===
set number " set nu
set relativenumber
set ruler
set cursorline
set cursorcolumn
syntax enable
syntax on

" ===
" === Editor behavior
" ===
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set list " Show invisible characters
set listchars=tab:‚ñ∏\ ,trail:‚ñ´
set scrolloff=5
set autoindent
set cindent
set smartindent
set wrap
set tw=0
set indentexpr=
set backspace=indent,eol,start

set foldmethod=indent
set foldlevel=99

" cursor shape
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" ===
" === Window behavior
" ===
set splitright
set splitbelow

" ===
" === Status/Command Bar
" ===
set laststatus=2
set showcmd
set autochdir
set formatoptions-=tc

" show command autocomplete
set wildignore=log/**,node_modules/**,target/**,*.rbc
set wildmenu
set wildmode=longest,list,full

" Search
set hlsearch
exec "nohlsearch"
set incsearch
set ignorecase
set smartcase

" ===
" === Restore Cursor Position
" ===
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" ===
" === Basic Mapping
" ===

" set <LEADER> as <SPACE>
let mapleader=" "

" Save and Quit
map s <nop>
map S :w<CR>
map Q :q<CR>
map wq :wq<CR>
map <LEADER>w :w <filename>
map <LEADER>r :r !
map <LEADER>s :%s/old/new/g
map <C-d> V y p

" Update Vim-Config-Source-File
map us :source $MYVIMRC<CR>

" Split Window

" above
map sk :set nosplitbelow<CR>:split<CR>
map <LEADER>k <C-w>k
" below
map sj :set splitbelow<CR>:split<CR>
map <LEADER>j <C-w>j
" right
map sl :set splitright<CR>:vsplit<CR>
map <LEADER>l <C-w>l
" left
map sh :set nosplitright<CR>:vsplit<CR>
map <LEADER>h <C-w>h

" Window Size
map <LEADER><up> :res +5<CR>
map <LEADER><down> :res -5<CR>
map <LEADER><left> :vertical resize-5<CR>
map <LEADER><right> :vertical resize+5<CR>

map ssv <C-w>t<C-w>H
map ssh <C-w>t<C-w>K

" Search key
map <LEADER><CR> :nohlsearch<CR>
map = nzz
map - Nzz

" ===
" === Tab manager
" ===
" create a new tab with tb
map tb :tabe<CR>
" switch forward or backward one tab with t=/t-
map t= :+tabnext<CR>
map t- :-tabnext<CR>
" move current tab backward or forwadr with tm=/tm-
map tm= :+tabmove<CR>
map tm- :-tabmove<CR>

" ===
" === other
" ===
map <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l

" create new file
map cn :new<CR>
" open dir and select file
map cnn :new<CR>:e ./<CR>

" ===
" === Install Plugins with vim-plug
" ===
call plug#begin('~/.vim/plugged')

" Vim Style and Theme
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'connorholyday/vim-snazzy'

" NERDTree
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Taglist
Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }

" Error checking
Plug 'w0rp/ale'

" Auto Complete
" Install Method
" (1) curl -sL install-node.now.sh/lts | sudo -E bash -
" (2) sudo apt-get install clangd-10
" (3) sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-10 100
" (4) :CocConfig
" (5) :CocInstall coc-snippets coc-clangd coc-python
" (6) pip3 install python-language-server
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" clang-format
Plug 'rhysd/vim-clang-format'

" header c < -- > header.h
" use method -->  :A
Plug 'vim-scripts/a.vim'

" choose window
" use method -->  1. - 2.number
Plug 't9md/vim-choosewin'

" search func
Plug 'dyng/ctrlsf.vim'

" show all func and search file under current project's files
Plug 'Yggdroot/LeaderF'

" function's notes
Plug 'vim-scripts/DoxygenToolkit.vim'

" Run Task
Plug 'skywind3000/asyncrun.vim'

call plug#end()

" ===
" === Airline
" ===
let g:airline#extensions#tabline#enabled = 1
" let g:airline_theme="luna"
let g:airline_theme="bubblegum"

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" powerline symbols
" let g:airline_left_sep = '‚ñ∂'
" let g:airline_left_alt_sep = '‚ùØ'
" let g:airline_right_sep = '‚óÄ'
" let g:airline_right_alt_sep = '‚ùÆ'
" let g:airline_symbols.linenr = '¬∂'
" let g:airline_symbols.branch = '‚éá'
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '‚ò∞'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '„èë'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'

" ===
" === snazzy
" ===
let g:SnazzyTransparent = 1
color snazzy
let g:lightline = { 'colorscheme': 'snazzy' }

" ===
" === NERDTree Config
" ===

" use method
" map tt open file directory tree
map tt :NERDTreeToggle<CR>
" R --> Refresh dir
" s --> split and show selected dir
" o --> open and close dir
" u --> set current dir's parent as root dir
" C --> set current dir as root dir
" m --> menu

" ==
" == NERDTree-git
" ==
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "‚úπ",
    \ "Staged"    : "‚úö",
    \ "Untracked" : "‚ú≠",
    \ "Renamed"   : "‚ûú",
    \ "Unmerged"  : "‚ïê",
    \ "Deleted"   : "‚úñ",
    \ "Dirty"     : "‚úó",
    \ "Clean"     : "‚úîÔ∏é",
    \ "Unknown"   : "?"
    \ }

" ===
" === Taglist
" ===
map <silent> T :TagbarOpenAutoClose<CR>

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" support c++11
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

" ===
" === ClangFormat
" ===
map <LEADER>f :ClangFormat<CR>

" ===
" === .a <--> .h
" ===
map  <LEADER>a :A<CR>

" ===
" ===  Switch Window
" ===
nmap <LEADER>- <Plug>(choosewin)
" dox
nmap <LEADER>d :Dox<CR>
map <LEADER>sf :CtrlSF<CR>

" ===
" === LeaderF
" ===
map clf :LeaderfFunction<CR>

map <LEADER>[ :bn<CR>
map <LEADER>] :bN<CR>
map  B :b$num

" ==========
" ===File Title===
" ==========
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
func SetTitle()
    if &filetype == 'sh'
        call setline(1,"\#########################################################################")
        call append(line("."),   "\#  File  Name  : ".expand("%"))
        call append(line(".")+1, "\#    Author    : lirongwei")
        call append(line(".")+2, "\#     Mail     : a2413044193@gmail.com")
        call append(line(".")+3, "\# Created Time : ".strftime("%Y/%m/%d %H:%M:%S"))
        call append(line(".")+4, "\#########################################################################")
        call append(line(".")+5, "\#!/bin/bash")
        call append(line(".")+6, "")
    else
        call setline(1, "/*************************************************************************")
        call append(line("."),   "  >  File  Name  : ".expand("%"))
        call append(line(".")+1, "  >    Author    : lirongwei")
        call append(line(".")+2, "  >     Mail     : a2413044193@gmail.com")
        call append(line(".")+3, "  > Created Time : ".strftime("%Y/%m/%d %H:%M:%S"))
        call append(line(".")+4, " ************************************************************************/")
        call append(line(".")+5, "")
    endif
    if &filetype == 'cpp'
        call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
        call append(line(".")+9, "int main(int argc, char** argv) {")
        call append(line(".")+10, "    <++>")
        call append(line(".")+11, "    return 0;")
        call append(line(".")+12, "}")
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
        call append(line(".")+8, "int main(int argc, char** argv) {")
        call append(line(".")+9, "    <++>")
        call append(line(".")+10, "    return 0;")
        call append(line(".")+11, "}")
    endif
endfunc

" ===
" === C/C++ Run
" === Run Task (<F5>)
" ===
let g:asyncrun_open = 6
noremap <F5> :AsyncRun gcc % -o %<<CR>
nmap <F6> :AsyncRun ./%<<CR>
nnoremap <F10> :call Asyncrun#quickfix_toggle(6)<CR>

nmap for o for (<++>; <++>; <++>) {<Esc>o<++><Esc>o}<Esc><LEADER>f
nmap fuc o  <++> <++> (<++>) {<Esc>o<++><Esc>o}<Esc><LEADER>f
nmap <LEADER>c I// <Esc>
